// script_2.js
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyCgSFDj7fRw6HSvZyOz1g5IM749f2sY55M",
  authDomain: "wordquiz-659d7.firebaseapp.com",
  databaseURL: "https://wordquiz-659d7-default-rtdb.firebaseio.com",
  projectId: "wordquiz-659d7",
  storageBucket: "wordquiz-659d7.firebasestorage.app",
  messagingSenderId: "785560761880",
  appId: "1:785560761880:web:9455e5767af0e0b9b1f56d"
};
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

let currentProfileId = null;

document.addEventListener("DOMContentLoaded", () => {
  showLoading(true);
  attemptLogin(0);
});

// üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
function attemptLogin(retryCount) {
  const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;

  if (!tgUser || !tgUser.id) {
    if (retryCount < 5) {
      setTimeout(() => attemptLogin(retryCount + 1), 1000);
    } else {
      showLoading(false);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
    }
    return;
  }

  currentProfileId = String(tgUser.id);
  const displayName = tgUser.username || tgUser.first_name || "Telegram User";

  const profileRef = database.ref("profiles/" + currentProfileId);
  profileRef.get()
    .then(snapshot => {
      if (!snapshot.exists()) {
        return profileRef.set({ name: displayName, knownWords: [] });
      }
    })
    .then(() => {
      console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤:", currentProfileId);
      showLoading(false);
      showQuizUI();
      updateKnownCounter();
    })
    .catch(error => {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
      showLoading(false);
      alert("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.register("./sw.js")
      .then(() => console.log("‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"))
      .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ Service Worker:", err));
  }
}

// üîÑ –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(show) {
  const loader = document.getElementById("loader");
  if (loader) loader.style.display = show ? "flex" : "none";
}

// üì¶ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function showQuizUI() {
  const inputModeDiv = document.getElementById("inputModeDiv");
  const submitWrapper = document.getElementById("submitWrapper");
  const welcome = document.getElementById("welcome");
  const counter = document.getElementById("knownCounter");
  const imageContainer = document.getElementById("imageContainer");

  if (welcome) welcome.style.display = "none";
  if (inputModeDiv) inputModeDiv.style.display = "block";
  if (submitWrapper) submitWrapper.style.display = "block";
  if (counter) counter.style.display = "flex";
  if (imageContainer) imageContainer.style.display = "flex";

  const container = document.getElementById("welcomeContainer");
  if (container) container.remove();
}

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞
function isValidWord(word) {
  return /^[a-zA-Z\s'-]+$/.test(word);
}

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
const submitAnswerBtn = document.getElementById("submitAnswerBtn");
const answerInput = document.getElementById("answerInput");

submitAnswerBtn.addEventListener("click", async () => {
  const newWord = answerInput.value.trim();

  if (!currentProfileId) {
    alert("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.");
    return;
  }

  if (!newWord || !isValidWord(newWord)) {
    showInputFeedback("–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞", true);
    return;
  }

  try {
    const profileRef = database.ref("profiles/" + currentProfileId + "/knownWords");
    const snapshot = await profileRef.get();
    const words = snapshot.val() || [];

    if (words.includes(newWord)) {
      showInputFeedback("–°–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å!", true);
    } else {
      words.push(newWord);
      await profileRef.set(words);
      showInputFeedback("–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", false);
      updateKnownCounter();
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞:", error);
    showInputFeedback("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏!", true);
  }
});

// üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
async function updateKnownCounter() {
  try {
    const snapshot = await database.ref(`profiles/${currentProfileId}/knownWords`).get();
    const words = snapshot.val() || [];
    const uniqueWords = [...new Set(words)];

    const numberElement = document.querySelector("#knownCounter .kc-number");
    if (numberElement) {
      numberElement.textContent = uniqueWords.length;
      numberElement.classList.add("bounce");
      setTimeout(() => numberElement.classList.remove("bounce"), 600);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞:", error);
  }
}

// ‚ú® –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
function showInputFeedback(message, isError) {
  answerInput.value = "";
  answerInput.placeholder = message;
  answerInput.classList.add("bounce");
  answerInput.style.borderColor = isError ? "red" : "green";

  setTimeout(() => {
    answerInput.classList.remove("bounce");
    answerInput.style.borderColor = "";
    answerInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º";
    answerInput.focus();
  }, 1500);
}

// üö´ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
document.addEventListener("gesturestart", e => e.preventDefault());
let lastTouchEnd = 0;
document.addEventListener("touchend", e => {
  const now = new Date().getTime();
  if (now - lastTouchEnd <= 300) e.preventDefault();
  lastTouchEnd = now;
}, false);
document.addEventListener("touchstart", e => {
  if (e.touches.length > 1) e.preventDefault();
}, { passive: false });
